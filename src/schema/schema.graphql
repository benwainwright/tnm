type Exclusion {
  id: ID!
  name: String!
  allergen: Boolean!
  customers: [Customer!]!
  recipes: [Recipe!]!
}

input ExclusionInput {
  name: String!
  allergen: Boolean!
  recipeIds: [ID!]!
}

input UpdateExclusionInput {
  id: ID!
  name: String!
  allergen: Boolean!
  recipeIds: [ID!]!
}

input DeleteExclusionInput {
  id: ID!
}

type CustomerExclusion  {
  id: ID!
  customerId: ID!
  exclusionId: ID!
}


type Recipe {
  id: ID!
  name: String!
  description: String
  potentialExclusions: [RecipeExclusion!]!
}

input UpdateRecipeInput {
  id: ID!
  name: String!
  description: String
  potentialExclusionIds: [ID!]!
}

input DeleteRecipeInput {
  id: ID!
}

input RecipeInput {
  name: String!
  description: String
  potentialExclusionIds: [ID!]!
}


type RecipeExclusion  {
  id: ID!
  recipeId: ID!
  exclusionId: ID!
}

type Customer {
  id: ID!
  firstName: String!
  surname: String!
  salutation: String!
  address: String!
  telephone: String!
  startDate: AWSDateTime
  paymentDayOfMonth: Int
  notes: String
  email: String!
  pauseStart: AWSDate
  pauseEnd: AWSDate
  daysPerWeek: Int!
  plan: Plan!
  legacyPrice: Int
  snack: String!
  breakfast: Boolean!
  exclusions: [Exclusion!]!
}

input CustomerInput {
  firstName: String!
  surname: String!
  salutation: String!
  address: String!
  telephone: String!
  startDate: AWSDateTime
  paymentDayOfMonth: Int
  notes: String
  email: String!
  pauseStart: AWSDate
  pauseEnd: AWSDate
  daysPerWeek: Int!
  plan: PlanInput!
  legacyPrice: Int
  snack: String!
  breakfast: Boolean!
  exclusionIds: [String!]!
}

input UpdateCustomerInput {
  id: ID!
  firstName: String!
  surname: String!
  salutation: String!
  address: String!
  telephone: String!
  startDate: AWSDateTime
  paymentDayOfMonth: Int
  notes: String
  email: String!
  pauseStart: AWSDate
  pauseEnd: AWSDate
  daysPerWeek: Int!
  plan: PlanInput!
  legacyPrice: Int
  snack: String!
  breakfast: Boolean!
  exclusionIds: [String!]!
}

input DeleteCustomerInput {
  id: ID!
}


type Query {
  getExclusionById(exclusionId: String!): Exclusion
  listExclusions: [Exclusion]
  getRecipeById(recipeId: String!): Recipe
  listRecipes: [Recipe]
  getCustomerById(customerId: String!): Customer
  listCustomers: [Customer]
}

type Mutation {
  updateRecipe(input: UpdateRecipeInput): Recipe
  deleteRecipe(input: DeleteRecipeInput): String
  createRecipe(input: RecipeInput): Recipe
  updateCustomer(input: UpdateCustomerInput): Customer
  createCustomer(input: CustomerInput): Customer
  deleteCustomer(input: DeleteCustomerInput): String
  updateExclusion(input: UpdateExclusionInput): Exclusion
  createExclusion(input: ExclusionInput): Exclusion
  deleteExclusion(input: DeleteExclusionInput): String
}

type Plan {
  name: String!
  mealsPerDay: Int!
  costPerMeal: Int!
  category: String!
}

input PlanInput {
  name: String!
  mealsPerDay: Int!
  costPerMeal: Int!
  category: String!
}
